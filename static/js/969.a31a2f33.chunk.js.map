{"version":3,"file":"static/js/969.a31a2f33.chunk.js","mappings":"yaAQaA,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GADgBC,EAAAA,EAAAA,IAAYC,EAAAA,IACOC,KAAI,SAAAC,GAAO,OAAIA,EAAQC,IAAI,IAqCpE,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJC,UAAU,OACVC,SAtCiB,SAAAC,GACnBA,EAAMC,iBACN,IAAMP,EAAU,CACdC,KAAMK,EAAME,OAAOC,SAASR,KAAKS,MACjCC,OAAQL,EAAME,OAAOC,SAASE,OAAOD,OAGvC,GAAId,EAAmBgB,SAASZ,EAAQC,MAEtC,OADAK,EAAME,OAAOK,QACNC,IAAAA,OAAAA,QAAwB,GAADC,OAAIf,EAAQC,KAAI,2BAA2B,CACvEe,MAAO,QACPC,SAAU,aACVC,SAAU,OACVC,QAAS,QACTC,QAAS,IACTC,aAAc,MACdC,WAAY,QACZC,SAAU,SAId7B,GAAS8B,EAAAA,EAAAA,IAAWxB,IACpBc,IAAAA,OAAAA,QAAwB,GAADC,OAAIf,EAAQC,KAAI,UAAU,CAC/Ce,MAAO,QACPC,SAAU,aACVC,SAAU,OACVC,QAAS,QACTC,QAAS,IACTC,aAAc,MACdC,WAAY,QACZC,SAAU,SAEZjB,EAAME,OAAOK,OACf,EAMIY,UAAU,MACVC,WAAW,SACXC,QAAS,EAAEC,SAAA,EAEXC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,KAAK,OACL9B,KAAK,OACL+B,QAAQ,oBACRC,MAAM,yIACNC,UAAQ,EACRC,MAAM,kBAERN,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,KAAK,MACL9B,KAAK,SACL+B,QAAQ,2EACRC,MAAM,gGACNC,UAAQ,EACRC,MAAM,oBAERN,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACL,KAAK,SAASM,QAAQ,YAAWT,SAAC,kBAKhD,E,oBCvEaU,EAAc,WACzB,IAAMC,GAAW1C,EAAAA,EAAAA,IAAY2C,EAAAA,IAC7BC,GAAgDC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvDI,EAAgBF,EAAA,GAAEG,EAAmBH,EAAA,GAC5CI,GAAoCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAwCT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAE9B1D,GAAWC,EAAAA,EAAAA,MA+CjB,OACEkC,EAAAA,EAAAA,KAAA,MAAAD,SACGW,EAASxC,KAAI,SAAAC,GAAO,OACnB6B,EAAAA,EAAAA,KAAA,MAAAD,SACGiB,IAAqB7C,EAAQuD,IAC5BrD,EAAAA,EAAAA,MAAAsD,EAAAA,SAAA,CAAA5B,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACEE,KAAK,OACLrB,MAAOuC,EACPQ,SAAU,SAAAC,GAAC,OAAIR,EAAcQ,EAAElD,OAAOE,MAAM,KAE9CmB,EAAAA,EAAAA,KAAA,SACEE,KAAK,OACLrB,MAAO2C,EACPI,SAAU,SAAAC,GAAC,OAAIJ,EAAgBI,EAAElD,OAAOE,MAAM,KAEhDmB,EAAAA,EAAAA,KAAA,UAAQE,KAAK,SAAS4B,QAAS,kBAvDxB,SAAAJ,GACjB,IAAMK,EAAgB,CACpBL,GAAIA,EACJtD,KAAMgD,EACNtC,OAAQ0C,GAGV3D,GAASmE,EAAAA,EAAAA,IAAYD,IAErB9C,IAAAA,OAAAA,KAAqB,GAADC,OAAIkC,EAAU,WAAW,CAC3CjC,MAAO,QACPC,SAAU,aACVC,SAAU,OACVC,QAAS,QACTC,QAAS,IACTC,aAAc,MACdC,WAAY,QACZC,SAAU,SAGZuB,EAAoB,MACpBI,EAAc,IACdI,EAAgB,GAClB,CAgCiDQ,CAAW9D,EAAQuD,GAAG,EAAC3B,SAAC,aAK/D1B,EAAAA,EAAAA,MAAAsD,EAAAA,SAAA,CAAA5B,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAI5B,EAAQC,QACZ4B,EAAAA,EAAAA,KAAA,KAAAD,SAAI5B,EAAQW,UACZT,EAAAA,EAAAA,MAAA,OAAA0B,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACEE,KAAK,SACL4B,QAAS,kBAxELJ,EAyESvD,EAAQuD,GAzEbtD,EAyEiBD,EAAQC,KAzEnBU,EAyEyBX,EAAQW,OAxE7DmC,EAAoBS,GACpBL,EAAcjD,QACdqD,EAAgB3C,GAHC,IAAC4C,EAAItD,EAAMU,CAyEwC,EACrDiB,SACF,UAGDC,EAAAA,EAAAA,KAAA,UAAQE,KAAK,SAAS4B,QAAS,kBA/CxBJ,EA+C2CvD,EAAQuD,GA9CtE7D,GAASqE,EAAAA,EAAAA,IAAcR,SACvBzC,IAAAA,OAAAA,QAAwB,kBAAmB,CACzCE,MAAO,QACPC,SAAU,aACVC,SAAU,OACVC,QAAS,QACTC,QAAS,IACTC,aAAc,MACdC,WAAY,QACZC,SAAU,SAVO,IAAAgC,CA+CsD,EAAC3B,SAAC,kBA9B9D5B,EAAQuD,GAoCZ,KAIb,E,8BChGaS,EAAS,WACpB,IAAMtE,GAAWC,EAAAA,EAAAA,MAIjB,OACEO,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACsB,UAAU,MAAMC,WAAW,SAASC,QAAS,EAAEC,SAAA,EACpDC,EAAAA,EAAAA,KAACoC,EAAAA,EAAU,KACXpC,EAAAA,EAAAA,KAACqC,EAAAA,GAAS,CACRT,SANoB,SAAAnD,GAAK,OAAIZ,GAASyE,EAAAA,EAAAA,GAAc7D,EAAME,OAAOE,OAAQ,EAOzE0D,YAAY,uBACZC,WAAY,CAAE,aAAc,cAIpC,E,oBCjBaC,EAAY,WACvB,IAAM5E,GAAWC,EAAAA,EAAAA,MAejB,OACEkC,EAAAA,EAAAA,KAAA,OAAAD,UACE1B,EAAAA,EAAAA,MAAA,QAAMG,SAfW,SAAAC,GACnBA,EAAMC,iBACN,IAAMgE,EAAOjE,EAAMkE,cAEnB9E,GACE+E,EAAAA,EAAAA,IAAM,CACJC,MAAOH,EAAK9D,SAASiE,MAAMhE,MAC3BiE,SAAUJ,EAAK9D,SAASkE,SAASjE,SAGrC6D,EAAK1D,OACP,EAIiCe,SAAA,EAC3B1B,EAAAA,EAAAA,MAAA,SAAA0B,SAAA,CAAO,SAELC,EAAAA,EAAAA,KAAA,SACEE,KAAK,QACL9B,KAAK,QACLmE,YAAY,4BAGhBlE,EAAAA,EAAAA,MAAA,SAAA0B,SAAA,CAAO,YAELC,EAAAA,EAAAA,KAAA,SACEE,KAAK,WACL9B,KAAK,WACLmE,YAAY,iBAGhBvC,EAAAA,EAAAA,KAAA,UAAQE,KAAK,SAAQH,SAAC,eAM9B,ECzCagD,G,eAAe,WAC1B,IAAMlF,GAAWC,EAAAA,EAAAA,MAgBjB,OACEkC,EAAAA,EAAAA,KAAA,OAAAD,UACE1B,EAAAA,EAAAA,MAAA,QAAMG,SAhBW,SAAAC,GACnBA,EAAMC,iBACN,IAAMgE,EAAOjE,EAAMkE,cAEnB9E,GACEmF,EAAAA,EAAAA,IAAS,CACP5E,KAAMsE,EAAK9D,SAASR,KAAKS,MACzBgE,MAAOH,EAAK9D,SAASiE,MAAMhE,MAC3BiE,SAAUJ,EAAK9D,SAASkE,SAASjE,SAGrC6D,EAAK1D,OACP,EAIiCe,SAAA,EAC3B1B,EAAAA,EAAAA,MAAA,SAAA0B,SAAA,CAAO,YAELC,EAAAA,EAAAA,KAAA,SACEE,KAAK,OACL9B,KAAK,OACLmE,YAAY,mBAGhBlE,EAAAA,EAAAA,MAAA,SAAA0B,SAAA,CAAO,SAELC,EAAAA,EAAAA,KAAA,SACEE,KAAK,QACL9B,KAAK,QACLmE,YAAY,4BAGhBlE,EAAAA,EAAAA,MAAA,SAAA0B,SAAA,CAAO,YAELC,EAAAA,EAAAA,KAAA,SACEE,KAAK,WACL9B,KAAK,WACLmE,YAAY,iBAGhBvC,EAAAA,EAAAA,KAAA,UAAQE,KAAK,SAAQH,SAAC,iBAM9B,GCpDakD,G,OAAS,WACpB,OACEjD,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gBAGZ,GAEamD,EAAQ,WACnB,OACE7E,EAAAA,EAAAA,MAAA,OAAA0B,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACAA,EAAAA,EAAAA,KAAA,QAAAD,SAAM,qBAGZ,E,iGCkBA,UA1BiB,WACf,IAAMoD,GAAYnF,EAAAA,EAAAA,IAAYoF,EAAAA,IACxBC,GAAQrF,EAAAA,EAAAA,IAAYsF,EAAAA,IAE1B,OACEjF,EAAAA,EAAAA,MAAA,OAAA0B,SAAA,EACEC,EAAAA,EAAAA,KAACuD,EAAAA,EAAM,CAAAxD,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,gBAGT1B,EAAAA,EAAAA,MAAA,OAAA0B,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBAEN1B,EAAAA,EAAAA,MAAA,OAAA0B,SAAA,EACEC,EAAAA,EAAAA,KAACpC,EAAAA,EAAW,KACZoC,EAAAA,EAAAA,KAACmC,EAAAA,GAAM,QAET9D,EAAAA,EAAAA,MAAA,OAAA0B,SAAA,CACGoD,GAAYnD,EAAAA,EAAAA,KAACiD,EAAAA,GAAM,KAAMjD,EAAAA,EAAAA,KAACS,EAAAA,GAAW,IACrC4C,IAASrD,EAAAA,EAAAA,KAACkD,EAAAA,GAAK,YAK1B,C,8IChCajF,EAAiB,SAAAuF,GAAK,OAAIA,EAAM9C,SAASA,QAAS,EAClD0C,EAAkB,SAAAI,GAAK,OAAIA,EAAM9C,SAASyC,SAAU,EACpDG,EAAc,SAAAE,GAAK,OAAIA,EAAM9C,SAAS2C,KAAM,EAG5C1C,GAAwB8C,EAAAA,EAAAA,IACnC,CAACxF,EAH+B,SAAAuF,GAAK,OAAIA,EAAME,OAAQ,IAIvD,SAAChD,EAAUiD,GACT,MAAqB,KAAjBA,EACKjD,EAEAA,EAASkD,QAAO,SAAAzF,GAAO,OAC5BA,EAAQC,KAAKyF,cAAc9E,SAAS4E,EAAaC,OAAO,GAG9D,G","sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/LoginForm/LoginForm.jsx","components/RegisterForm/RegisterForm.jsx","components/Spinner/Spinner.jsx","pages/Contacts/Contacts.jsx","redux/contacts/selectors.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const stateContacts = useSelector(selectContacts);\n  const stateContactsNames = stateContacts.map(contact => contact.name);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const contact = {\n      name: event.target.elements.name.value,\n      number: event.target.elements.number.value,\n    };\n\n    if (stateContactsNames.includes(contact.name)) {\n      event.target.reset();\n      return Notiflix.Notify.warning(`${contact.name} is already in contacts`, {\n        width: '500px',\n        position: 'center-top',\n        distance: '18px',\n        svgSize: '120px',\n        timeout: 3000,\n        borderRadius: '3px',\n        fontFamily: 'Dosis',\n        fontSize: '20px',\n      });\n    }\n\n    dispatch(addContact(contact));\n    Notiflix.Notify.success(`${contact.name} added`, {\n      width: '500px',\n      position: 'center-top',\n      distance: '18px',\n      svgSize: '120px',\n      timeout: 3000,\n      borderRadius: '3px',\n      fontFamily: 'Dosis',\n      fontSize: '20px',\n    });\n    event.target.reset();\n  };\n\n  return (\n    <Stack\n      component=\"form\"\n      onSubmit={handleSubmit}\n      direction=\"row\"\n      alignItems=\"center\"\n      spacing={2}\n    >\n      <TextField\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[A-Za-z.'\\- ]+$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        label=\"Contact name\"\n      />\n      <TextField\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"^\\+?\\d{1,4}?\\s?\\(?\\d{1,4}?\\)?\\s?\\d{1,4}\\s?\\d{1,4}\\s?\\d{1,9}$\"\n        title=\"number number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        label=\"Contact number\"\n      />\n      <Button type=\"submit\" variant=\"contained\">\n        Add contact\n      </Button>\n    </Stack>\n  );\n};\n","import React, { useState } from 'react';\nimport Notiflix from 'notiflix';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact, editContact } from 'redux/contacts/operations';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const [editingContactId, setEditingContactId] = useState(null);\n  const [editedName, setEditedName] = useState('');\n  const [editedNumber, setEditedNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleEdit = (id, name, number) => {\n    setEditingContactId(id);\n    setEditedName(name);\n    setEditedNumber(number);\n  };\n\n  const handleSave = id => {\n    const editedContact = {\n      id: id,\n      name: editedName,\n      number: editedNumber,\n    };\n\n    dispatch(editContact(editedContact));\n\n    Notiflix.Notify.info(`${editedName} edited`, {\n      width: '500px',\n      position: 'center-top',\n      distance: '18px',\n      svgSize: '120px',\n      timeout: 3000,\n      borderRadius: '3px',\n      fontFamily: 'Dosis',\n      fontSize: '20px',\n    });\n\n    setEditingContactId(null);\n    setEditedName('');\n    setEditedNumber('');\n  };\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n    Notiflix.Notify.failure(`Contact DELETED`, {\n      width: '500px',\n      position: 'center-top',\n      distance: '18px',\n      svgSize: '120px',\n      timeout: 3000,\n      borderRadius: '3px',\n      fontFamily: 'Dosis',\n      fontSize: '20px',\n    });\n  };\n\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <li key={contact.id}>\n          {editingContactId === contact.id ? (\n            <>\n              <input\n                type=\"text\"\n                value={editedName}\n                onChange={e => setEditedName(e.target.value)}\n              />\n              <input\n                type=\"text\"\n                value={editedNumber}\n                onChange={e => setEditedNumber(e.target.value)}\n              />\n              <button type=\"button\" onClick={() => handleSave(contact.id)}>\n                Save\n              </button>\n            </>\n          ) : (\n            <>\n              <p>{contact.name}</p>\n              <p>{contact.number}</p>\n              <div>\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    handleEdit(contact.id, contact.name, contact.number)\n                  }\n                >\n                  Edit\n                </button>\n                <button type=\"button\" onClick={() => handleDelete(contact.id)}>\n                  Delete\n                </button>\n              </div>\n            </>\n          )}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { filterContact } from 'redux/contacts/filtersSlice';\nimport InputBase from '@mui/material/InputBase';\nimport SearchIcon from '@mui/icons-material/Search';\nimport Stack from '@mui/material/Stack';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleInputChange = event => dispatch(filterContact(event.target.value));\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n      <SearchIcon />\n      <InputBase\n        onChange={handleInputChange}\n        placeholder=\"Find contact by name\"\n        inputProps={{ 'aria-label': 'search' }}\n      />\n    </Stack>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Email\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"example@example.com\"\n          />\n        </label>\n        <label>\n          Password\n          <input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n          />\n        </label>\n        <button type=\"submit\">\n          Log in\n        </button>\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Username\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"John Brown\"\n          />\n        </label>\n        <label>\n          Email\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"example@example.com\"\n          />\n        </label>\n        <label>\n          Password\n          <input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n          />\n        </label>\n        <button type=\"submit\">\n          Register\n        </button>\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const Loader = () => {\n  return (\n    <div>\n      <span>Loading...</span>\n    </div>\n  );\n};\n\nexport const Error = () => {\n  return (\n    <div>\n      <p></p>\n      <span>Loading error!</span>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useSelector } from 'react-redux';\nimport { ContactForm } from 'components';\nimport { ContactList } from 'components';\nimport { Filter } from 'components';\nimport { Loader, Error } from 'components';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <div>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n\n      <div>\n        <div>\n          <h1>Phonebook</h1>\n        </div>\n        <div>\n          <ContactForm />\n          <Filter />\n        </div>\n        <div>\n          {isLoading ? <Loader /> : <ContactList />}\n          {error && <Error />}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Contacts;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectStatusFilter = state => state.filters;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectStatusFilter],\n  (contacts, statusFilter) => {\n    if (statusFilter === '') {\n      return contacts;\n    } else {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(statusFilter.filter)\n      );\n    }\n  }\n);"],"names":["ContactForm","dispatch","useDispatch","stateContactsNames","useSelector","selectContacts","map","contact","name","_jsxs","Stack","component","onSubmit","event","preventDefault","target","elements","value","number","includes","reset","Notiflix","concat","width","position","distance","svgSize","timeout","borderRadius","fontFamily","fontSize","addContact","direction","alignItems","spacing","children","_jsx","TextField","type","pattern","title","required","label","Button","variant","ContactList","contacts","selectVisibleContacts","_useState","useState","_useState2","_slicedToArray","editingContactId","setEditingContactId","_useState3","_useState4","editedName","setEditedName","_useState5","_useState6","editedNumber","setEditedNumber","id","_Fragment","onChange","e","onClick","editedContact","editContact","handleSave","deleteContact","Filter","SearchIcon","InputBase","filterContact","placeholder","inputProps","LoginForm","form","currentTarget","logIn","email","password","RegisterForm","register","Loader","Error","isLoading","selectIsLoading","error","selectError","Helmet","state","createSelector","filters","statusFilter","filter","toLowerCase"],"sourceRoot":""}